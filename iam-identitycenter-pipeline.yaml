# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: "2010-09-09"
Description: "Create a CI/CD pipeline for AWS Identity Center permission sets and assignments"

## +-------
## | Metadata
## +--------------
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Parameters"
        Parameters:
          - nameConvention
          - s3NameConvention
          - mgmtAccountId
      - Label:
          default: "CloudWatch Logs"
        Parameters:
          - cwLGRetentionInDays
      - Label:
          default: "SNS Notifications"
        Parameters:
          - codeBuildErrorEmailAddress

## +-------
## | Parameters
## +--------------
Parameters:
  # Name of the project
  nameConvention:
    Description: "Prefix that will be used to name resources in this stack within the AWS IAM Identity Center Delegated Admin account (e.g. roles, events, pipeline)"
    Type: String
    Default: "iam-identitycenter"
  s3NameConvention:
    Description: "Prefix that will be used to name S3 buckets.  Recommended to mirror nameConvention, but MUST use all lowercase"
    Type: String
    Default: "iam-identitycenter"
  mgmtAccountId:
    Description: "Account ID of the management account. (e.g. 123456789123)"
    Type: String
  cwLGRetentionInDays:
    Description: "Specify the retention time in days for logs within CloudWatch Log Groups"
    Type: String
    Default: 365
  providerType:
    Description: "Repository provider type. Ex: GitHub"
    Type: String
    Default: "GitHub"
  fullRepositoryId:
    Description: "Full repository ID in the format user/repository_name"
    Type: String
    Default: user/iam-idc-pipeline
  codeBuildErrorEmailAddress:
    Description: "Optional: If you wish to receive a notification upon a CodeBuild error, enter an email address and accept the topic subscription. (e.g. user@emaildomain.com)"
    Type: String



## +-------
## | Conditions
## +--------------
Conditions:
  codeBuildErrorEmailProvided:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: codeBuildErrorEmailAddress

Resources:
  ## +-------
  ## | SNS Topics (CodeBuild Error and CodeCommit Notifications)
  ## +---------------
  CodeBuildSNSTopic:
    Type: AWS::SNS::Topic
    Condition: codeBuildErrorEmailProvided
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W47
            reason: "SNS Topic should specify KmsMasterKeyId property"
    Properties:
      TopicName: !Sub "${nameConvention}-CodeBuildSNSTopic"

  CodeBuildSNSSubscription:
    Condition: codeBuildErrorEmailProvided
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref codeBuildErrorEmailAddress
      TopicArn: !Ref CodeBuildSNSTopic

  CodeBuildSNSTopicPolicy:
    Condition: codeBuildErrorEmailProvided
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sns:Publish
            Resource:
              Ref: CodeBuildSNSTopic
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub "${AWS::AccountId}"
      Topics:
        - !Ref CodeBuildSNSTopic



  ## +-------
  ## | CloudWatch Log Groups (Lambda and CodeBuild)
  ## +---------------
  PipelineLogGroupAssignments:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data"
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${nameConvention}-assignments"
      RetentionInDays: !Ref cwLGRetentionInDays
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-assignments"

  PipelineLogGroupTemplateValidation:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84 
            reason: "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data"
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${nameConvention}-templatevalidation"
      RetentionInDays: !Ref cwLGRetentionInDays
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-templatevalidation"

  PipelineLogGroupPermissionSet:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84 
            reason: "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data"
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${nameConvention}-permissionset"
      RetentionInDays: !Ref cwLGRetentionInDays
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-permissionset"

  SNSLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: codeBuildErrorEmailProvided
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84 
            reason: "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${nameConvention}-PipelineToSNSLambda"
      RetentionInDays: !Ref cwLGRetentionInDays
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-PipelineToSNSLambda"

  ## +-------
  ## | IAM Role (Pipeline Failure Notification)
  ## +---------------
  PipelineToSNSRole:
    Type: "AWS::IAM::Role"
    Condition: codeBuildErrorEmailProvided
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "The IAM Role name is specified as an explicit for use within the scripting"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Description: "This role grants necessary permissions to Lambda"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      RoleName: !Sub "${nameConvention}-PipelineToSNSRole"
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-PipelineToSNSRole"

  PipelineToSNSRolePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Condition: codeBuildErrorEmailProvided
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "The IAM Role name is specified as an explicit for use within the scripting"
    Properties:
      Description: "This policy grants necessary permissions to PipelineToSNSRole"
      ManagedPolicyName: !Sub "${nameConvention}-PipelineToSNSRolePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: SNSPublish
            Effect: Allow
            Action: sns:Publish
            Resource: !Ref CodeBuildSNSTopic
          - Sid: CodebuildLogs
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${nameConvention}*:*"
            Action:
              - "logs:GetLogEvents"
      Roles:
        - Ref: "PipelineToSNSRole"

  ## +-------
  ## | Lambda (Pipeline Failure Notifications)
  ## +---------------
  PipelineToSNSLambda:
    Type: AWS::Lambda::Function
    Condition: codeBuildErrorEmailProvided
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
            reason: "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
          - id: W89
            reason: "Lambda functions should be deployed inside a VPC"
          - id: W58
            reason: "Lambda functions require permission to write CloudWatch Logs"
    Properties:
      FunctionName: !Sub "${nameConvention}-PipelineToSNSLambda"
      Code:
        ZipFile:
          Fn::Sub: |
            import base64
            import boto3
            import gzip
            import json
            import logging
            import os
            import re

            from botocore.exceptions import ClientError

            logging.basicConfig(level=logging.INFO)
            logger = logging.getLogger(__name__)


            def logpayload(event):
                logger.setLevel(logging.DEBUG)
                logger.debug(event['awslogs']['data'])
                compressed_payload = base64.b64decode(event['awslogs']['data'])
                uncompressed_payload = gzip.decompress(compressed_payload)
                log_payload = json.loads(uncompressed_payload)
                return log_payload


            def error_details(payload):
                error_msg = ""
                ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
                log_events = payload['logEvents']
                logger.debug(payload)
                loggroup = payload['logGroup']
                logstream = payload['logStream']
                lambda_func_name = loggroup.split('/')
                logger.debug(f'LogGroup: {loggroup}')
                logger.debug(f'Logstream: {logstream}')
                logger.debug(f'Function name: {lambda_func_name[3]}')
                logger.debug(log_events)
                for log_event in log_events:
                    error_msg += log_event['message']
                error_msg = ansi_escape.sub('', error_msg)
                logger.debug('Message: %s' % error_msg.split("\n"))
                return loggroup, logstream, error_msg, lambda_func_name

            # Get the log events from the log stream
            def acquire_log(lgroup, lstream):
                cloudwatch_logs = boto3.client('logs')
                log_events_response_dict = cloudwatch_logs.get_log_events(
                    logGroupName=lgroup,
                    logStreamName=lstream,
                    limit=100,
                    startFromHead=False
                )
                log_events_response = str(log_events_response_dict)
                log_events_response = (re.sub("\{'timestamp': [0-9]+, |\'ingestionTime': [0-9]+\}, ", '', log_events_response))
                log_events_response = (re.sub(",", '\n', log_events_response))
                return log_events_response
                
            def publish_message(loggroup, logstream, error_msg, lambda_func_name, buildlog):
                sns_arn = os.environ['snsARN']  # Getting the SNS Topic ARN passed in by the environment variables.
                snsclient = boto3.client('sns')
                try:
                    message = ""
                    message += "\nIAM Identity Center Automation Pipeline Error Summary" + "\n"
                    message += "\n##########################################################\n\n"
                    message += "CloudWatch LogGroup Name: " + str(loggroup) + "\n\n"
                    message += "CloudWatch LogStream: " + str(logstream) + "\n\n"
                    message += "CloudWatch Subscription Filter Event: " + str(error_msg.split("\n")) + "\t\n\n"
                    message += "CloudWatch Events (Top 100): \n"
                    message += buildlog

                    # Sending the notification...
                    snsclient.publish(
                        TargetArn=sns_arn,
                        Subject='Execution error for IAM Identity Center Automation Pipeline',
                        Message=message
                    )
                except ClientError as e:
                    logger.error("An error occurred: %s" % e)

            def lambda_handler(event, context):
                pload = logpayload(event)
                lgroup, lstream, errmessage, lambdaname = error_details(pload)
                buildlog = acquire_log(lgroup, lstream)
                publish_message(lgroup, lstream, errmessage, lambdaname,buildlog)

      Description: A function to pull events from CloudWatch Logs and send to SNS
      Handler: index.lambda_handler
      Role: !GetAtt PipelineToSNSRole.Arn
      Runtime: python3.11
      Environment:
        Variables:
          snsARN: !Ref CodeBuildSNSTopic
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-PipelineToSNSLambda"

  PipelineToSNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: codeBuildErrorEmailProvided
    Properties:
      FunctionName: !GetAtt PipelineToSNSLambda.Arn
      Action: lambda:InvokeFunction
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceAccount: !Sub "${AWS::AccountId}"

  ## +-------
  ## | CW Log Subscriptions
  ## +---------------
  PipelineLambdaSubscriptionAssignments:
    Type: AWS::Logs::SubscriptionFilter
    Condition: codeBuildErrorEmailProvided
    DependsOn: PipelineToSNSLambdaPermission
    Properties:
      FilterName: !Sub "${nameConvention}-assignments"
      DestinationArn: !GetAtt PipelineToSNSLambda.Arn
      FilterPattern: '?ERROR ?Error'
      LogGroupName: !Ref PipelineLogGroupAssignments

  PipelineLambdaSubscriptionValidation:
    Type: AWS::Logs::SubscriptionFilter
    Condition: codeBuildErrorEmailProvided
    DependsOn: PipelineToSNSLambdaPermission
    Properties:
      FilterName: !Sub "${nameConvention}-validation"
      DestinationArn: !GetAtt PipelineToSNSLambda.Arn
      FilterPattern: '?ERROR ?Error'
      LogGroupName: !Ref PipelineLogGroupTemplateValidation

  PipelineLambdaSubscriptionPermissionSet:
    Type: AWS::Logs::SubscriptionFilter
    Condition: codeBuildErrorEmailProvided
    DependsOn: PipelineToSNSLambdaPermission
    Properties:
      FilterName: !Sub "${nameConvention}-permissionset"
      DestinationArn: !GetAtt PipelineToSNSLambda.Arn
      FilterPattern: '?ERROR ?Error'
      LogGroupName: !Ref PipelineLogGroupPermissionSet

  ## +-------
  ## | CodePipeline
  ## +---------------
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Sub "${nameConvention}-pipeline"
      ArtifactStore:
        Type: S3
        Location: !Ref artifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeStarSourceConnection
              Configuration:
                FullRepositoryId: !Ref fullRepositoryId
                BranchName: main
                ConnectionArn: !GetAtt IdentityCenterConnection.ConnectionArn
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: RepositoryOutput
              RunOrder: 1
        - Name: TemplateValidation
          Actions:
            - Name: TemplateValidation
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodebuildTemplateValidation
              RunOrder: 1
              InputArtifacts:
                - Name: RepositoryOutput
              OutputArtifacts:
                - Name: TemplateValidation
        - Name: Deploy
          Actions:
            - Name: PermissionSet
              RunOrder: 1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodebuildPermissionSet
              InputArtifacts:
                - Name: RepositoryOutput
              OutputArtifacts:
                - Name: PermissionSetOutput
            - Name: Assignments
              RunOrder: 2
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodebuildAssignments
              InputArtifacts:
                - Name: RepositoryOutput
              OutputArtifacts:
                - Name: AssignmentsOutput
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-pipeline"

  ## +-------
  ## | IAM Role (CodePipeline)
  ## +---------------
  PipelineRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "ListAllMyBuckets requires * in Resource"
          - id: W28
            reason: "Fixed name required to future references"
    Properties:
      RoleName: !Sub ${nameConvention}-codepipeline-write
      Description: "Role for code pipeline"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${nameConvention}-codepipeline-write
          PolicyDocument:
            Statement:
              - Sid: CodeBuildAccess
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${nameConvention}-*"
              - Sid: S3AllAccess
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource:
                  - "*"
              - Sid: BucketPermissions
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${artifactsBucket}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${artifactsBucket}*"
              - Sid: CodeConnection
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource:
                  - !GetAtt  IdentityCenterConnection.ConnectionArn

      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-codepipeline-write"

  ## +-------
  ## | Repository (Identity Center Management)
  ## +--------------

  IdentityCenterConnection:
    Type: AWS::CodeConnections::Connection
    Properties:
      ConnectionName: !Sub "${nameConvention}-repository"
      ProviderType: !Ref providerType
  

  ## +-------
  ## | CodeBuild Project (Template Validation)
  ## +---------------
  CodebuildTemplateValidation:
    Type: AWS::CodeBuild::Project
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: "No relevant artifact produced in projects. S3 bucket is also encrypted with managed key"
    Properties:
      Name: !Sub ${nameConvention}-templatevalidation
      ServiceRole: !GetAtt RoleCodebuildTemplateValidation.Arn
      EncryptionKey: !GetAtt KmsKeyS3.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/amazonlinux-x86_64-standard:5.0"
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REGION
            Value: !Sub ${AWS::Region}
      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes: 480
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo "[INFO] [BUILD] Starting templates validation"
                - cd source/validation/
                - chmod +x iam-identitycenter-validation.py
                - python3 iam-identitycenter-validation.py --ps-folder '../../templates/permissionsets/' --assignments-folder '../../templates/assignments/'
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-templatevalidation"

  ## +-------
  ## | IAM Service Role (Template Validation)
  ## +---------------
  RoleCodebuildTemplateValidation:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Requires * in Resource to get all policies"
          - id: W28
            reason: "Fixed name required to future references"
    Properties:
      RoleName: !Sub ${nameConvention}-tempvalidation-read
      Description: "Service role for CodeBuild"
      Policies:
        - PolicyName: !Sub ${nameConvention}-tempvalidation-read
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CodeBuildAccess
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${nameConvention}-*"
              - Sid: Logs
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${nameConvention}*:*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
              - Sid: Buckets
                Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${artifactsBucket}*/*"
              - Sid: CodeBuild
                Effect: Allow
                Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:UpdateReport"
                  - "codebuild:BatchPutTestCases"
                  - "codebuild:BatchPutCodeCoverages"
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${nameConvention}*"
              - Sid: SpecificPermissions
                Effect: Allow
                Action:
                  - access-analyzer:ValidatePolicy
                  - iam:GetPolicy
                Resource:
                  - "*"
              - Sid: KMSPermission
                Effect: Allow
                Action:
                  - "kms:Encrypt"
                  - "kms:Decrypt"
                  - "kms:ReEncrypt*"
                  - "kms:GenerateDataKey*"
                  - "kms:DescribeKey"
                Resource:
                  - !GetAtt KmsKeyS3.Arn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-tempvalidation-read"

  ## +-------
  ## | CodeBuild Project (Permission Set)
  ## +---------------
  CodebuildPermissionSet:
    Type: AWS::CodeBuild::Project
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: "No relevant artifact produced in projects. S3 bucket is also encrypted with managed key"
    Properties:
      Name: !Sub ${nameConvention}-permissionset
      ServiceRole: !GetAtt RoleCodebuildPermissionSets.Arn
      EncryptionKey: !GetAtt KmsKeyS3.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REGION
            Value: !Sub ${AWS::Region}
      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes: 480
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo "[INFO] [BUILD] Starting Permission Sets stage"
                - cd source/permissionsets
                - chmod +x iam-identitycenter-permissionset.py
                - python3 iam-identitycenter-permissionset.py
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-permissionset"

  ## +-------
  ## | IAM Service Role (Permission Set)
  ## +---------------
  RoleCodebuildPermissionSets:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Requires * in Resource to interact with all Identity Center resources"
          - id: W28
            reason: "Fixed name required to future references"
    Properties:
      RoleName: !Sub ${nameConvention}-permissionset-write
      Description: "Service role for CodeBuild"
      Policies:
        - PolicyName: !Sub ${nameConvention}-permissionset-write
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CodeBuildAccess
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${nameConvention}-*"
              - Sid: Logs
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${nameConvention}*:*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
              - Sid: Buckets
                Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${artifactsBucket}*/*"
              - Sid: CodeBuild
                Effect: Allow
                Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:UpdateReport"
                  - "codebuild:BatchPutTestCases"
                  - "codebuild:BatchPutCodeCoverages"
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${nameConvention}*"
              - Sid: SpecificPermissions
                Effect: Allow
                Action:
                  - sso:ProvisionPermissionSet
                  - sso:ListPermissionSets
                  - sso:DeletePermissionsPolicy
                  - sso:PutPermissionsPolicy
                  - sso:PutInlinePolicyToPermissionSet
                  - sso:DeleteInlinePolicyToPermissionSet
                  - sso:DescribePermissionSet
                  - sso:GetPermissionSet
                  - sso:AttachManagedPolicyToPermissionSet
                  - sso:CreatePermissionSet
                  - sso:UpdatePermissionSet
                  - sso:ListTagsForResource
                  - sso:ListManagedPoliciesInPermissionSet
                  - sso:DescribeAccountAssignmentDeletionStatus
                  - sso:DeletePermissionSet
                  - sso:TagResource
                  - sso:DetachManagedPolicyFromPermissionSet
                  - sso:DeleteInlinePolicyFromPermissionSet
                  - sso:AttachCustomerManagedPolicyReferenceToPermissionSet
                  - sso:DeletePermissionsBoundaryFromPermissionSet
                  - sso:ListCustomerManagedPolicyReferencesInPermissionSet
                  - sso:PutPermissionsBoundaryToPermissionSet
                  - sso:DetachCustomerManagedPolicyReferenceFromPermissionSet
                  - sso:GetPermissionsBoundaryForPermissionSet
                  - sso:ListInstances
                Resource:
                  - "*"
              - Sid: KMSPermission
                Effect: Allow
                Action:
                  - "kms:Encrypt"
                  - "kms:Decrypt"
                  - "kms:ReEncrypt*"
                  - "kms:GenerateDataKey*"
                  - "kms:DescribeKey"
                Resource:
                  - !GetAtt KmsKeyS3.Arn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-permissionset-write"

  ## +-------
  ## | CodeBuild Project (Assignments)
  ## +---------------
  CodebuildAssignments:
    Type: AWS::CodeBuild::Project
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: "No relevant artifact produced in projects. S3 bucket is also encrypted with managed key"
    Properties:
      Name: !Sub ${nameConvention}-assignments
      ServiceRole: !GetAtt RoleCodebuildAssignments.Arn
      EncryptionKey: !GetAtt KmsKeyS3.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REGION
            Value: !Sub ${AWS::Region}
          - Name: TERRAFORM_STATE
            Value: !Ref tfStateBucket
          - Name: MGMT_ACCOUNT
            Value: !Ref mgmtAccountId

      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes: 480
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo "[INFO] [INSTALL] Installing dependencies"
                - wget https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip
                - unzip terraform_*_linux_amd64.zip -d /usr/bin/
                - chmod +x /usr/bin/terraform
                - echo "[INFO] [INSTALL] Installing finished"                    
              finally:
                - terraform --version
            build:
              commands:
                - echo "[INFO] [BUILD] Starting Assignments stage"
                - cd source/assignments/
                - chmod +x iam-identitycenter-assignments.py
                - python3 iam-identitycenter-assignments.py --org_role $ORG_ROLE --mgmt_account $MGMT_ACCOUNT
                - terraform init -backend-config="bucket=$TERRAFORM_STATE" -backend-config="key=assignments.tfstate" -backend-config="region=$REGION" 
                - terraform plan
                - terraform apply -auto-approve
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-assignments"

  ## +-------
  ## | IAM Service Role (Assignments)
  ## +---------------
  RoleCodebuildAssignments:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Requires * in Resource to interact with all Identity Center resources"
          - id: W28
            reason: "Fixed name required to future references"
    Properties:
      RoleName: !Sub ${nameConvention}-assignments-write
      Description: "Service role for CodeBuild"
      Policies:
        - PolicyName: !Sub ${nameConvention}-assignments-write
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CodeBuildAccess
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${nameConvention}-*"
              - Sid: Logs
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${nameConvention}*:*"
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${nameConvention}*"
              - Sid: Buckets
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${artifactsBucket}*/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${tfStateBucket}*/*"
              - Sid: CodeBuild
                Effect: Allow
                Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:UpdateReport"
                  - "codebuild:BatchPutTestCases"
                  - "codebuild:BatchPutCodeCoverages"
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${nameConvention}*"
              - Sid: SpecificPermissions
                Effect: Allow
                Action:
                  - "sso:ListPermissionSets"
                  - "sso:ListTagsForResource"
                  - "sso:DescribePermissionSet"
                  - "sso:ListInstances"
                  - "sso:DescribeAccountAssignmentCreationStatus"
                  - "organizations:ListAccounts"
                  - "organizations:ListAccountsForParent"
                  - "organizations:ListOrganizationalUnitsForParent"
                  - "organizations:ListRoots"
                  - "sso:CreateAccountAssignment"
                  - "sso:DeleteAccountAssignment"
                  - "sso:ListAccountsForProvisionedPermissionSet"
                  - "sso:DescribeAccountAssignmentDeletionStatus"
                  - "sso:ListAccountAssignments"
                  - "identitystore:ListGroups"
                  - "identitystore:ListUsers"
                  - "iam:GetSAMLProvider"
                  - "iam:CreateRole"
                  - "iam:PutRolePolicy"
                  - "iam:AttachRolePolicy"
                  - "iam:GetRole"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:ListRolePolicies"
                Resource:
                  - "*"
              - Sid: KMSPermission
                Effect: Allow
                Action:
                  - "kms:Encrypt"
                  - "kms:Decrypt"
                  - "kms:ReEncrypt*"
                  - "kms:GenerateDataKey*"
                  - "kms:DescribeKey"
                Resource:
                  - !GetAtt KmsKeyS3.Arn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-assignments-write"


  ## +-------
  ## | S3 Bucket Artifact
  ## +---------------
  tfStateBucket:
    Type: "AWS::S3::Bucket"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "There is no need to enable log in this bucket."
    Properties:
      BucketName: !Sub "${s3NameConvention}-${AWS::AccountId}-tf-state"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID: !Ref KmsKeyS3
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-tf-state"

  tfStateBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref tfStateBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: HTTPSOnly
            Effect: Deny
            Principal:
              AWS: "*"
            Action:
              - s3:*
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${tfStateBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${tfStateBucket}
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: AllowCodeBuild
            Effect: Allow
            Principal:
              AWS: !GetAtt RoleCodebuildAssignments.Arn
            Action:
              - s3:Get*
              - s3:Put*
              - s3:List*
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${tfStateBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${tfStateBucket}

  ## +-------
  ## | S3 Bucket Artifact
  ## +---------------
  artifactsBucket:
    Type: "AWS::S3::Bucket"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "There is no need to enable log in this bucket."
    Properties:
      BucketName: !Sub "${s3NameConvention}-${AWS::AccountId}-artfcs"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID: !Ref KmsKeyS3
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-artfcs"

  artifactsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref artifactsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: HTTPSOnly
            Effect: Deny
            Principal:
              AWS: "*"
            Action:
              - s3:*
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${artifactsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${artifactsBucket}
            Condition:
              Bool:
                aws:SecureTransport: false

  KmsKeyAliasS3:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${nameConvention}/s3"
      TargetKeyId: !Ref KmsKeyS3

  KmsKeyS3:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for S3
      Enabled: True
      EnableKeyRotation: false
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: "2012-10-17"
        Id: s3-kms-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
              - kms:DescribeKey
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Sub "${AWS::AccountId}"
                kms:ViaService: !Sub s3.${AWS::Region}.amazonaws.com
          - Sid: Allow direct access to key metadata to the account
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:Describe*
              - kms:Get*
              - kms:List*
              - kms:RevokeGrant
            Resource: "*"
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-s3"

  LambdaTriggerRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Fixed name required to future references"
    Properties:
      RoleName: !Sub ${nameConvention}-pipelinetrigger-write
      Description: "Role that the Lambda will use to trigger pipeline"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub ${mgmtAccountId}
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Sub ${nameConvention}-pipelinetrigger
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CodePipelinePerm
                Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${nameConvention}-pipeline
      Tags: 
        - Key: "Name"
          Value: !Sub "${nameConvention}-pipelinetrigger-write"          